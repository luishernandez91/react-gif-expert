{"version":3,"sources":["components/addCategory.js","components/GridGifItem.js","helpers/GetGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategory","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","GridGifItem","title","url","className","src","alt","getGifs","category","a","fetch","resp","json","data","map","img","id","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","console","log","key","GifExpertApp","categories","cat","ReactDOM","render","document","getElementById"],"mappings":"6MAGaA,EAAc,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,YAAiB,EACNC,mBAAS,IADH,mBACnCC,EADmC,KACvBC,EADuB,KAgB1C,OACI,0BAAMC,SAXW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,QAAU,IAIhCR,GAAY,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACpCN,EAAc,OAIV,2BACIO,KAAK,OACLC,MAAOT,EACPU,SAnBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,YCJlBG,EAAc,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,IAChC,OACI,yBAAKC,UAAU,8CACX,yBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,2BAAIA,K,uBCNHK,EAAO,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,6DACbN,EADa,iDACmCK,EADnC,+DAEAE,MAAMP,GAFN,cAEbQ,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KAHY,kBAIXA,EAAKC,KAAI,SAAAC,GACb,MAAO,CACHC,GAAID,EAAIC,GACRd,MAAOa,EAAIb,MAAOC,IAClBY,EAAIE,OAAOC,iBAAiBf,SARjB,2CAAH,sDCIPgB,EAAU,SAAC,GAAgB,IAAfX,EAAc,EAAdA,SAAc,ECDX,SAACA,GAAc,IAAD,EACZpB,mBAAS,CAC/ByB,KAAM,GACNO,SAAS,IAHyB,mBAC/BC,EAD+B,KACxBC,EADwB,KAetC,OATAC,qBAAU,WACNhB,EAAQC,GAAUgB,MAAK,SAAAb,GACnBW,EAAS,CACLT,KAAMF,EACNS,SAAS,SAGlB,CAACZ,IAEGa,EDbyBI,CAAajB,GAAhCS,EADsB,EAC5BJ,KAAcO,EADc,EACdA,QAErB,OADAM,QAAQC,IAAIV,EAAQG,GAEhB,oCACI,wBAAIhB,UAAW,qCAAsCI,GACpDY,GAAW,uBAAGhB,UAAW,oCAAd,cACZ,yBAAKA,UAAU,YAEPa,EAAOH,KAAI,SAAAC,GAAG,OAAI,kBAAC,EAAD,eAAaa,IAAKb,EAAIC,IAAQD,UETvDc,EAAe,WAAO,IAAD,EAEIzC,mBAAS,IAFb,mBAEvB0C,EAFuB,KAEX3C,EAFW,KAG9B,OACI,oCACI,4CACA,kBAAC,EAAD,CAAaA,YAAaA,IAC1B,6BAEI2C,EAAWhB,KAAI,SAAAiB,GAAG,OAAI,kBAAC,EAAD,CAASH,IAAKG,EAAKvB,SAAUuB,SCRnEC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.854c05ee.chunk.js","sourcesContent":["import React, {useState} from 'react'\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({setCategory}) => {\n    const [inputValue, setInputValue] = useState('');\n    const handleInputChange = (e) => {\n        setInputValue(e.target.value);\n    };\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        if (inputValue.trim().length <= 2) {\n            return;\n        }\n\n        setCategory(cats => [inputValue, ...cats]);\n        setInputValue('');\n    };\n    return (\n        <form onSubmit={handleSubmit}>\n            <input\n                type=\"text\"\n                value={inputValue}\n                onChange={handleInputChange}\n            />\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategory: PropTypes.func.isRequired\n}\n","import React from 'react'\n\nexport const GridGifItem = ({title, url}) => {\n    return (\n        <div className=\"gif-item animate__animated animate__fadeIn\">\n            <img src={url} alt={title}/>\n            <p>{title}</p>\n        </div>\n    )\n};\n","export const getGifs = async (category) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${category}&limit=10&api_key=XHMIpKaJLfl7urV8qI0o2UuhaMQsczhu`;\n    const resp = await fetch(url);\n    const {data} = await resp.json();\n    return  data.map(img => {\n        return {\n            id: img.id,\n            title: img.title, url:\n            img.images.downsized_medium.url\n        }\n    });\n};\n","import React from 'react'\nimport {GridGifItem} from './GridGifItem';\nimport {useFetchGifs} from \"../hooks/useFetchGifs\";\n\nexport const GifGrid = ({category}) => {\n    const {data: images, loading} = useFetchGifs(category);\n    console.log(images, loading);\n    return (\n        <>\n            <h3 className={'animate__animated animate__fadeIn'}>{category}</h3>\n            {loading && <p className={'animate__animated animate__flash'}>Loading...</p>}\n            <div className=\"gif-grid\">\n                {\n                    images.map(img => <GridGifItem key={img.id} {...img}/>)\n                }\n            </div>\n        </>\n    )\n};\n","import {useEffect, useState} from \"react\";\nimport {getGifs} from \"../helpers/GetGifs\";\n\nexport const useFetchGifs = (category) => {\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect(() => {\n        getGifs(category).then(resp => {\n            setState({\n                data: resp,\n                loading: false\n            });\n        });\n    }, [category]);\n\n    return state;\n}\n","import React, {useState} from 'react'\nimport {AddCategory} from './components/addCategory'\nimport {GifGrid} from './components/GifGrid'\n\nexport const GifExpertApp = () => {\n\n    const [categories, setCategory] = useState([]);\n    return (\n        <>\n            <h1>GifExpertApp</h1>\n            <AddCategory setCategory={setCategory}/>\n            <hr/>\n            {\n                categories.map(cat => <GifGrid key={cat} category={cat}/>)\n            }\n        </>\n    )\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { GifExpertApp } from './GifExpertApp';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}